# ------------------------------------------------------------------------
# This is a workflow to build a Maven project and deploy to Sonatype repos
# ------------------------------------------------------------------------
name: __Reusable Maven clean install deploy

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      javaHomeVersion:
        required: false
        type: string
        default: '8'
      mavenVersion:
        required: false
        type: string
        description: "Maven version to be used"
        default: '3.8.3'
      release_staging_to_maven_central:
        required: false
        type: boolean
        description: "If true, then env.DO_NOT_RELEASE_SONATYPE_STAGING will be set to false"
      deploy_snapshots_only:
        required: false
        type: boolean
        description: "If true, then snapshot project versions will be deployed only"
      dryrun_release_deployment:
        required: false
        # Use string type to allow empty values
        type: string
        description: "If 'true', this will deploy to staging as the release version but not release to Maven Central."

    secrets:
      OSSRH_USERNAME:
        required: false
      OSSRH_PASSWORD:
        required: false
      OSSRH_GPG_SECRET_KEY:
        required: false
      OSSRH_GPG_PASSPHRASE:
        required: false
      TEST_REPO_KEY_PASSPHRASE:
        required: false

    outputs:
      MAVEN_VERSION:
        description: "The Maven version job1 was run on"
        value: ${{ jobs.job1_Build_and_Deploy.outputs.MAVEN_VERSION }}

jobs:
  job1_Build_and_Deploy:
    runs-on: ${{ inputs.runner }}
    outputs:
      MAVEN_VERSION: ${{ steps.show-maven-version.outputs.MAVEN_VERSION }}

    #strategy:
    #  matrix:
    #    #maven-version: [ '3.8.3', '3.9.4' ]
    #    maven-version: [ '3.8.3' ]

    steps:
      - name: Propagate env from inputs
        run: |
          if [[ -n "${{ secrets.OSSRH_GPG_PASSPHRASE }}" ]]; then
            echo "IS_SECRETS_SET=true" >> $GITHUB_ENV
          else
            echo "IS_SECRETS_SET=false" >> $GITHUB_ENV
          fi
          if [[ "${{ inputs.release_staging_to_maven_central }}" == "true" ]]; then
            echo "DO_NOT_RELEASE_SONATYPE_STAGING=false" >> $GITHUB_ENV
          else
            echo "DO_NOT_RELEASE_SONATYPE_STAGING=true" >> $GITHUB_ENV
          fi
          if [[ "${{ inputs.deploy_snapshots_only }}" == "true" ]]; then
            echo "DEPLOY_SNAPSHOTS_ONLY=true" >> $GITHUB_ENV
          else
            echo "DEPLOY_SNAPSHOTS_ONLY=false" >> $GITHUB_ENV
          fi
          if [[ "${{ inputs.dryrun_release_deployment }}" == "true" ]]; then
            echo "DEPLOY_SNAPSHOTS_ONLY=false" >> $GITHUB_ENV
            echo "DO_NOT_RELEASE_SONATYPE_STAGING=true" >> $GITHUB_ENV
            echo "DRYRUN_RELEASE_DEPLOYMENT=true" >> $GITHUB_ENV
          else
            echo "DRYRUN_RELEASE_DEPLOYMENT=false" >> $GITHUB_ENV
          fi

      - name: Log Environment
        run: |
          echo "  github.event_name:      ${{ github.event_name }}"
          echo "  github.ref:             ${{ github.ref }}"
          echo "  workdir:                $(pwd)"
          echo "  homedir:                ${HOME}"
          echo "  inputs.runner:          ${{ inputs.runner }}"
          echo "  inputs.javaHomeVersion: ${{ inputs.javaHomeVersion }}"
          echo "  inputs.mavenVersion:    ${{ inputs.mavenVersion }}"
          echo "  env.IS_SECRETS_SET:     ${{ env.IS_SECRETS_SET }}"
          echo "  env.DO_NOT_RELEASE_SONATYPE_STAGING: ${{ env.DO_NOT_RELEASE_SONATYPE_STAGING }}"
          echo "  env.DEPLOY_SNAPSHOTS_ONLY:           ${{ env.DEPLOY_SNAPSHOTS_ONLY }}"
          echo "  env.DRYRUN_RELEASE_DEPLOYMENT:       ${{ env.DRYRUN_RELEASE_DEPLOYMENT }}"

      - name: Checkout repo
        uses: actions/checkout@v4

      # Setup JAVA home with Maven settings for publishing to Maven Central
      - name: Setup JAVA home with Maven settings.xml
        id: setup-java-home
        uses: GHCICD/setup-java@vHEAD-GHCICD-552
        with:
          java-version: ${{ inputs.javaHomeVersion }}
          distribution: zulu
          # We prefer to get an empty local repo for any build
          #cache: maven
          # Create private key here only.
          # settings.xml with further gpg and sonatype authentication
          # will be configured by step 'create-maven-settings' below.
          gpg-private-key: ${{ secrets.OSSRH_GPG_SECRET_KEY }}

      - name: Determine default installed Maven version
        id: default-maven
        run: |
          DEFAULT_MAVEN_VERSION="$(mvn -q -v)"
          echo "maven-version=${DEFAULT_MAVEN_VERSION}" >> $GITHUB_OUTPUT
          echo "Default installed Maven version: ${DEFAULT_MAVEN_VERSION}"

      - name: Update Maven version if required
        uses: mavenplugins/actions-setup-maven@vHEAD
        if: inputs.mavenVersion != steps.default-maven.outputs.maven-version
        with:
          maven-version: '${{ inputs.mavenVersion }}'

      - name: Determine Maven version related cmd options
        id: maven-cmd-options
        run: |
          # Helper function to convert semver version to int value for comparison
          # Convert an up to 4 digit semversion i.j.k.l with up to 3 digits each part to
          # an integer value.
          #
          # Inspired by: https://stackoverflow.com/a/37939589/15763374
          #
          # Usage:
          #   if [ $(semver2int $VAR) -ge $(semver2int "6.2.0") ]; then
          #     echo "Version is up to date"
          #   fi
          #
          semver2int() {
            if [[ -n "$1" && ! "$1" =~ ^[0-9]+(\.[0-9]{1,3}){0,3}$ ]]; then
              echo "##### $0: '$1' is an invalid version for this script! It must be up to 4 numeric parts separated by '.' and up to 3 digits for each part!" >&2
              exit 1
            fi
            echo "$1" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
          }
          EFFECTIVE_MAVEN_VERSION="$(mvn -q -v)"
          echo "Effective installed Maven version: ${EFFECTIVE_MAVEN_VERSION}"
          if [[ $(semver2int "${EFFECTIVE_MAVEN_VERSION}") -ge $(semver2int "3.6.1") ]]; then
            MVN_NTP_OPTION="-ntp"
            echo "  => -ntp commandline option is available!"
          else
            MVN_NTP_OPTION=""
            echo "  => -ntp commandline option is NOT available!"
          fi
          if [[ $(semver2int "${EFFECTIVE_MAVEN_VERSION}") -lt $(semver2int "3.6.3") ]]; then
            MVN_HELP_VERSION_OPTION="-Dversion.maven-help-plugin=3.3.0"
            echo "  => MVN_HELP_VERSION_OPTION=${MVN_HELP_VERSION_OPTION}!"
          else
            MVN_HELP_VERSION_OPTION=""
          fi
          echo "MVN_NTP_OPTION=${MVN_NTP_OPTION}" >> $GITHUB_ENV
          echo "MVN_HELP_VERSION_OPTION=${MVN_HELP_VERSION_OPTION}" >> $GITHUB_ENV

      - name: Create Maven settings.xml
        id: create-maven-settings
        uses: mavenplugins/actions-maven-settings-action@vHEAD
        with:
          # Override file created by step 'setup-java-home' above
          override: true
          sonatypeSnapshots: true
          githubServer: false
          # Note: server-id must comply with config in org-parent/pom.xml
          servers: |
            [{
              "id": "organization_nexus",
              "username": "${env.OSSRH_USERNAME}",
              "password": "${env.OSSRH_PASSWORD}"
             },
             {
              "id": "gpg.passphrase",
              "passphrase": "${env.OSSRH_GPG_PASSPHRASE}",
              "configuration": {}
             }]

      - name: Show initial Maven setup result
        run: |
          echo "PATH:      ${PATH}"
          echo "JAVA_HOME: ${JAVA_HOME}"
          mvn --version
          echo "MAVEN_OPTS: ${MAVEN_OPTS}"
          echo "##### BEGIN - settings.xml"
          cat ~/.m2/settings.xml
          echo "##### END - settings.xml"
          echo "##### BEGIN - toolchains.xml"
          cat ~/.m2/toolchains.xml
          echo "##### END - toolchains.xml"

      - name: Validate Maven running properly with project POM
        run: |
          mvn ${{ env.MVN_NTP_OPTION }} -B -Dexpression=project.version -DforceStdout ${{ env.MVN_HELP_VERSION_OPTION }} help:evaluate

      - name: Enforce release version to dryrun a release deployment
        if: env.DRYRUN_RELEASE_DEPLOYMENT == 'true'
        run: |
          MAVEN_PROJECT_VERSION=$(mvn -q -Dexpression=project.version -DforceStdout ${{ env.MVN_HELP_VERSION_OPTION }} help:evaluate)
          if [[ "${MAVEN_PROJECT_VERSION}" == *-SNAPSHOT ]]; then
            MAVEN_PROJECT_RELEASE_VERSION="${MAVEN_PROJECT_VERSION%*-SNAPSHOT}"
            echo "Locally update project version to release version: ${MAVEN_PROJECT_VERSION} -> ${MAVEN_PROJECT_RELEASE_VERSION}"
            mvn ${{ env.MVN_NTP_OPTION }} -B versions:set -DnewVersion=${MAVEN_PROJECT_RELEASE_VERSION}
            # Validate actual project version vs. expected
            MAVEN_PROJECT_VERSION=$(mvn -q -Dexpression=project.version -DforceStdout ${{ env.MVN_HELP_VERSION_OPTION }} help:evaluate)
            if [[ "${MAVEN_PROJECT_VERSION}" != "${MAVEN_PROJECT_RELEASE_VERSION}" ]]; then
              echo "##### ERROR: Maven project version failed to update to release version"
              exit 1
            fi
          fi

      - name: Update a SNAPSHOT version if ref is not master or main branch
        if: env.DRYRUN_RELEASE_DEPLOYMENT != 'true' && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/main'
        run: |
          MAVEN_PROJECT_VERSION=$(mvn -q -Dexpression=project.version -DforceStdout ${{ env.MVN_HELP_VERSION_OPTION }} help:evaluate)
          if [[ "${MAVEN_PROJECT_VERSION}" == *-SNAPSHOT ]]; then
            # Determine version insert string
            if [[ "${{ github.ref }}" == refs/heads/* ]]; then
              # We are on a branch ref
              BRANCH=${{ github.ref }}
              # cut off the leading refs/heads
              BRANCH=${BRANCH/refs\/heads\/}
              # replace any / with _
              VERSION_INSERT=${BRANCH//\//_}
              # limit VERSION_INSERT to max. 40 last characters
              VERSION_INSERT=$(_MAX_LEN=40 && [[ ${#VERSION_INSERT} -gt ${_MAX_LEN} ]] && echo "${VERSION_INSERT:0-${_MAX_LEN}}" || echo "${VERSION_INSERT}")
            else
              # Use short SHA as version insert
              SHA=${{ github.sha }}
              # Take first 7 digits as short sha
              SHA_SHORT=${SHA::7}
              VERSION_INSERT=${SHA_SHORT}
            fi
            # 1.0.0-SNAPSHOT -> 1.0.0-${VERSION_INSERT}-SNAPSHOT
            MAVEN_PROJECT_DEVBRANCH_VERSION="${MAVEN_PROJECT_VERSION%*-SNAPSHOT}-${VERSION_INSERT}-SNAPSHOT"
            echo "Locally update project version to dev branch version: ${MAVEN_PROJECT_VERSION} -> ${MAVEN_PROJECT_DEVBRANCH_VERSION}"
            mvn ${{ env.MVN_NTP_OPTION }} -B versions:set -DnewVersion=${MAVEN_PROJECT_DEVBRANCH_VERSION}
            # Validate actual project version vs. expected
            MAVEN_PROJECT_VERSION=$(mvn -q -Dexpression=project.version -DforceStdout ${{ env.MVN_HELP_VERSION_OPTION }} help:evaluate)
            if [[ "${MAVEN_PROJECT_VERSION}" != "${MAVEN_PROJECT_DEVBRANCH_VERSION}" ]]; then
              echo "##### ERROR: Maven project version failed to update to dev branch version"
              exit 1
            fi
          fi

      - name: Set environment for project, compile and toolchain version
        run: |
          MAVEN_PROJECT_VERSION=$(mvn -q -Dexpression=project.version -DforceStdout ${{ env.MVN_HELP_VERSION_OPTION }} help:evaluate)
          if [[ "${MAVEN_PROJECT_VERSION}" == *-SNAPSHOT ]]; then
            IS_SNAPSHOT_VERSION=true
          else
            IS_SNAPSHOT_VERSION=false
          fi
          MAVEN_COMPILER_TARGET=$(mvn -q -Dexpression=maven.compiler.target -DforceStdout ${{ env.MVN_HELP_VERSION_OPTION }} help:evaluate)
          MAVEN_TOOLCHAIN_VERSION="${MAVEN_COMPILER_TARGET:-${{ inputs.javaHomeVersion }}}"
          # Strip off probable leading 1.
          MAVEN_TOOLCHAIN_VERSION="${MAVEN_TOOLCHAIN_VERSION#1.*}"
          echo "  MAVEN_PROJECT_VERSION:   ${MAVEN_PROJECT_VERSION}"
          echo "  IS_SNAPSHOT_VERSION:     ${IS_SNAPSHOT_VERSION}"
          echo "  MAVEN_COMPILER_TARGET:   ${MAVEN_COMPILER_TARGET}"
          echo "  MAVEN_TOOLCHAIN_VERSION: ${MAVEN_TOOLCHAIN_VERSION}"
          echo "MAVEN_PROJECT_VERSION=${MAVEN_PROJECT_VERSION}" >> $GITHUB_ENV
          echo "IS_SNAPSHOT_VERSION=${IS_SNAPSHOT_VERSION}" >> $GITHUB_ENV
          echo "MAVEN_COMPILER_TARGET=${MAVEN_COMPILER_TARGET}" >> $GITHUB_ENV
          echo "MAVEN_TOOLCHAIN_VERSION=${MAVEN_TOOLCHAIN_VERSION}" >> $GITHUB_ENV

      - name: Add JAVA version for toolchain if required
        id: add-java-for-toolchain
        uses: GHCICD/setup-java@vHEAD-GHCICD-552
        if: env.MAVEN_TOOLCHAIN_VERSION != inputs.javaHomeVersion
        with:
          java-version: ${{ env.MAVEN_TOOLCHAIN_VERSION }}
          distribution: zulu
          update-toolchains-only: true

      - name: Show Maven version, settings.xml and toolchains.xml
        id: show-maven-version
        run: |
          echo "PATH:      ${PATH}"
          echo "JAVA_HOME: ${JAVA_HOME}"
          mvn --version
          echo "MAVEN_OPTS: ${MAVEN_OPTS}"
          echo "##### BEGIN - settings.xml"
          cat ~/.m2/settings.xml
          echo "##### END - settings.xml"
          echo "##### BEGIN - toolchains.xml"
          cat ~/.m2/toolchains.xml
          echo "##### END - toolchains.xml"
          # Set step outputs:
          echo "MAVEN_VERSION=${{ inputs.mavenVersion }}" >> $GITHUB_OUTPUT
          echo "MAVEN_VERSION=${{ inputs.mavenVersion }}" >> $GITHUB_ENV

      - name: Build and install artifacts
        run: |
          # -ntp Do not display transfer progress when downloading or uploading
          # -B   Run in non-interactive (batch) mode (disables output color)
          # -U   Forces a check for missing releases and updated snapshots on
          mvn ${{ env.MVN_NTP_OPTION }} -B -U \
              clean install
        env:
          OSSRH_GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_PASSPHRASE }}
          IS_SNAPSHOT_VERSION: ${{ env.IS_SNAPSHOT_VERSION }}
          # We do not want to release to Maven Central via this action!
          # Releases shall be performed via unleash plugin only.
          DO_NOT_RELEASE_SONATYPE_STAGING: ${{ env.DO_NOT_RELEASE_SONATYPE_STAGING }}
          TEST_REPO_KEY_PASSPHRASE: ${{ secrets.TEST_REPO_KEY_PASSPHRASE }}

      - name: Publish to Sonatype and/or Maven Central Repo
        if: env.IS_SECRETS_SET == 'true' && (env.IS_SNAPSHOT_VERSION == 'true' || env.DEPLOY_SNAPSHOTS_ONLY == 'false')
        run: |
          # -ntp Do not display transfer progress when downloading or uploading
          # -B   Run in non-interactive (batch) mode (disables output color)
          mvn ${{ env.MVN_NTP_OPTION }} -B \
              deploy
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          OSSRH_GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_PASSPHRASE }}
          IS_SNAPSHOT_VERSION: ${{ env.IS_SNAPSHOT_VERSION }}
          # We do not want to release to Maven Central via this action!
          # Releases shall be performed via unleash plugin only.
          DO_NOT_RELEASE_SONATYPE_STAGING: ${{ env.DO_NOT_RELEASE_SONATYPE_STAGING }}
          TEST_REPO_KEY_PASSPHRASE: ${{ secrets.TEST_REPO_KEY_PASSPHRASE }}
