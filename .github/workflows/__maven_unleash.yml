# ---------------------------------------------
# This is a workflow to unleash a Maven project
# ---------------------------------------------
name: __Reusable Maven unleash

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      javaHomeVersion:
        required: false
        type: string
        default: '8'
      releaseVersion:
        required: false
        type: string
      nextSnapshotVersion:
        required: false
        type: string
      releaseToMavenCentral:
        required: false
        type: boolean
        description: "If true, then env.DO_NOT_RELEASE_SONATYPE_STAGING will be set to false. This will imply to run unleash plugin with actual release workflow."
      enforceUnleashReleaseWorkflow:
        required: false
        type: boolean
        description: "If true, then the unleash plugin will perform the actual release workflow. Otherwise the dry run workflow will be performed - unless releaseToMavenCentral is set true!"
      unleashWorkflowURL:
        required: false
        type: string
        description: "If not blank, then the unleash plugin will perform this workflow. This implies that releaseToMavenCentral and enforceUnleashReleaseWorkflow will be ignored and env.DO_NOT_RELEASE_SONATYPE_STAGING is set true!"
      mavenOpts:
        required: false
        type: string
        description: "Additional Maven options for the mvn commandline"
        default: ''
      mavenVersion:
        required: false
        type: string
        description: "Maven version to be used"
        default: '3.8.3'

    secrets:
      OSSRH_USERNAME:
        required: true
      OSSRH_PASSWORD:
        required: true
      OSSRH_GPG_SECRET_KEY:
        required: true
      OSSRH_GPG_PASSPHRASE:
        required: true
      TEST_REPO_KEY_PASSPHRASE:
        required: true

    outputs:
      MAVEN_VERSION:
        description: "The Maven version job1 was run on"
        value: ${{ jobs.job1_Unleash_Project.outputs.MAVEN_VERSION }}
      EFFECTIVE_RELEASE_VERSION:
        description: "The release version having been applied"
        value: ${{ jobs.job1_Unleash_Project.outputs.EFFECTIVE_RELEASE_VERSION }}
      EFFECTIVE_NEXT_SNAPSHOT_VERSION:
        description: "The next development version having been applied"
        value: ${{ jobs.job1_Unleash_Project.outputs.EFFECTIVE_NEXT_SNAPSHOT_VERSION }}

jobs:
  job1_Unleash_Project:
    runs-on: ${{ inputs.runner }}
    outputs:
      MAVEN_VERSION: ${{ steps.show-maven-version.outputs.MAVEN_VERSION }}
      EFFECTIVE_RELEASE_VERSION: ${{ steps.determine-unleash-versions.EFFECTIVE_RELEASE_VERSION }}
      EFFECTIVE_NEXT_SNAPSHOT_VERSION: ${{ steps.determine-unleash-versions.EFFECTIVE_NEXT_SNAPSHOT_VERSION }}

    #strategy:
    #  matrix:
    #    #maven-version: [ '3.8.3', '3.9.4' ]
    #    maven-version: [ '3.8.3' ]

    steps:
      - name: Propagate env from inputs
        run: |
          if [[ "${{ inputs.releaseToMavenCentral }}" == "true" && -z "${{ inputs.unleashWorkflowURL }}" ]]; then
            DO_NOT_RELEASE_SONATYPE_STAGING=false
          else
            DO_NOT_RELEASE_SONATYPE_STAGING=true
          fi
          echo "DO_NOT_RELEASE_SONATYPE_STAGING=${DO_NOT_RELEASE_SONATYPE_STAGING}" >> $GITHUB_ENV
          if [[ -n "${{ inputs.unleashWorkflowURL }}" ]]; then
            # Use specific workflow
            echo "UNLEASH_WORKFLOW_URL=${{ inputs.unleashWorkflowURL }}" >> $GITHUB_ENV
          elif [[ "${DO_NOT_RELEASE_SONATYPE_STAGING}" == "false" || "${{ inputs.enforceUnleashReleaseWorkflow }}" == "true" ]]; then
            # Use unleash release workflow
            echo "UNLEASH_WORKFLOW_URL=https://raw.githubusercontent.com/mavenplugins/reusable-gh-actions/master/.github/workflows/resources/unleash_workflows/perform_release" >> $GITHUB_ENV
          else
            # Use unleash DryRun workflow
            echo "UNLEASH_WORKFLOW_URL=https://raw.githubusercontent.com/mavenplugins/reusable-gh-actions/master/.github/workflows/resources/unleash_workflows/perform_dryrun" >> $GITHUB_ENV
          fi

      - name: Log Environment
        run: |
          echo "  github.event_name:      ${{ github.event_name }}"
          echo "  github.ref:             ${{ github.ref }}"
          echo "  workdir:                $(pwd)"
          echo "  homedir:                ${HOME}"
          echo "  inputs.runner:          ${{ inputs.runner }}"
          echo "  inputs.javaHomeVersion: ${{ inputs.javaHomeVersion }}"
          echo "  inputs.mavenVersion:    ${{ inputs.mavenVersion }}"
          echo "  inputs.mavenOpts:       ${{ inputs.mavenOpts }}"
          echo "  inputs.releaseVersion:                ${{ inputs.releaseVersion }}"
          echo "  inputs.nextSnapshotVersion:           ${{ inputs.nextSnapshotVersion }}"
          echo "  env.DO_NOT_RELEASE_SONATYPE_STAGING:  ${{ env.DO_NOT_RELEASE_SONATYPE_STAGING }}"
          echo "  env.UNLEASH_WORKFLOW_URL: ${{ env.UNLEASH_WORKFLOW_URL }}"

      # We must check out before setup-java, since that one is looking for a pom.xml!
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          # We need full history! - otherwise we end up in "missing commits" issue on unleash plugin
          fetch-depth: 0
          # Explicitly provide the ref path rather than using the original triggering SHA,
          # since that might have changed by particular jobs in multi job scenarios
          ref: ${{ github.ref }}

      # Setup JAVA home with Maven settings for publishing to Maven Central
      - name: Setup JAVA home with Maven settings.xml
        id: setup-java-home
        uses: GHCICD/setup-java@vHEAD-GHCICD-552
        with:
          java-version: ${{ inputs.javaHomeVersion }}
          distribution: zulu
          # We prefer to get an empty local repo for any build
          #cache: maven
          # Create private key here only.
          # settings.xml with further gpg and sonatype authentication
          # will be configured by step 'create-maven-settings' below.
          gpg-private-key: ${{ secrets.OSSRH_GPG_SECRET_KEY }}

      - name: Determine default installed Maven version
        id: default-maven
        run: |
          DEFAULT_MAVEN_VERSION="$(mvn -q -v)"
          echo "maven-version=${DEFAULT_MAVEN_VERSION}" >> $GITHUB_OUTPUT
          echo "Default installed Maven version: ${DEFAULT_MAVEN_VERSION}"

      - name: Update Maven version if required
        uses: mavenplugins/actions-setup-maven@vHEAD
        if: inputs.mavenVersion != steps.default-maven.outputs.maven-version
        with:
          maven-version: '${{ inputs.mavenVersion }}'

      - name: Determine Maven version related cmd options
        id: maven-cmd-options
        run: |
          # Helper function to convert semver version to int value for comparison
          # Convert an up to 4 digit semversion i.j.k.l with up to 3 digits each part to
          # an integer value.
          #
          # Inspired by: https://stackoverflow.com/a/37939589/15763374
          #
          # Usage:
          #   if [ $(semver2int $VAR) -ge $(semver2int "6.2.0") ]; then
          #     echo "Version is up to date"
          #   fi
          #
          semver2int() {
            if [[ -n "$1" && ! "$1" =~ ^[0-9]+(\.[0-9]{1,3}){0,3}$ ]]; then
              echo "##### $0: '$1' is an invalid version for this script! It must be up to 4 numeric parts separated by '.' and up to 3 digits for each part!" >&2
              exit 1
            fi
            echo "$1" | awk -F. '{ printf("%d%03d%03d%03d\n", $1,$2,$3,$4); }'
          }
          EFFECTIVE_MAVEN_VERSION="$(mvn -q -v)"
          echo "Effective installed Maven version: ${EFFECTIVE_MAVEN_VERSION}"
          if [[ $(semver2int "${EFFECTIVE_MAVEN_VERSION}") -ge $(semver2int "3.6.1") ]]; then
            MVN_NTP_OPTION="-ntp"
            echo "  => -ntp commandline option is available!"
          else
            MVN_NTP_OPTION=""
            echo "  => -ntp commandline option is NOT available!"
          fi
          if [[ $(semver2int "${EFFECTIVE_MAVEN_VERSION}") -lt $(semver2int "3.6.3") ]]; then
            MVN_HELP_VERSION_OPTION="-Dversion.maven-help-plugin=3.3.0"
            echo "  => MVN_HELP_VERSION_OPTION=${MVN_HELP_VERSION_OPTION}!"
          else
            MVN_HELP_VERSION_OPTION=""
          fi
          echo "MVN_NTP_OPTION=${MVN_NTP_OPTION}" >> $GITHUB_ENV
          echo "MVN_HELP_VERSION_OPTION=${MVN_HELP_VERSION_OPTION}" >> $GITHUB_ENV

      - name: Create Maven settings.xml
        id: create-maven-settings
        uses: mavenplugins/actions-maven-settings-action@vHEAD
        with:
          # Override file created by step 'setup-java-home' above
          override: true
          sonatypeSnapshots: true
          githubServer: false
          # Note: server-id must comply with config in org-parent/pom.xml
          servers: |
            [{
              "id": "organization_nexus",
              "username": "${env.OSSRH_USERNAME}",
              "password": "${env.OSSRH_PASSWORD}"
             },
             {
              "id": "gpg.passphrase",
              "passphrase": "${env.OSSRH_GPG_PASSPHRASE}",
              "configuration": {}
             }]

      - name: Show initial Maven setup result
        run: |
          echo "PATH:      ${PATH}"
          echo "JAVA_HOME: ${JAVA_HOME}"
          mvn --version
          echo "MAVEN_OPTS: ${MAVEN_OPTS}"
          echo "##### BEGIN - settings.xml"
          cat ~/.m2/settings.xml
          echo "##### END - settings.xml"
          echo "##### BEGIN - toolchains.xml"
          cat ~/.m2/toolchains.xml
          echo "##### END - toolchains.xml"

      - name: Validate Maven running properly with project POM
        run: |
          mvn ${{ env.MVN_NTP_OPTION }} -B -Dexpression=project.version -DforceStdout ${{ env.MVN_HELP_VERSION_OPTION }} help:evaluate

      - name: Set environment for project, compile and toolchain version
        run: |
          MAVEN_PROJECT_VERSION=$(mvn -q -Dexpression=project.version -DforceStdout ${{ env.MVN_HELP_VERSION_OPTION }} help:evaluate)
          MAVEN_COMPILER_TARGET=$(mvn -q -Dexpression=maven.compiler.target -DforceStdout ${{ env.MVN_HELP_VERSION_OPTION }} help:evaluate)
          MAVEN_TOOLCHAIN_VERSION="${MAVEN_COMPILER_TARGET:-${{ inputs.javaHomeVersion }}}"
          # Strip off probable leading 1.
          MAVEN_TOOLCHAIN_VERSION="${MAVEN_TOOLCHAIN_VERSION#1.*}"
          echo "  MAVEN_PROJECT_VERSION:   ${MAVEN_PROJECT_VERSION}"
          echo "  MAVEN_COMPILER_TARGET:   ${MAVEN_COMPILER_TARGET}"
          echo "  MAVEN_TOOLCHAIN_VERSION: ${MAVEN_TOOLCHAIN_VERSION}"
          echo "MAVEN_PROJECT_VERSION=${MAVEN_PROJECT_VERSION}" >> $GITHUB_ENV
          echo "MAVEN_COMPILER_TARGET=${MAVEN_COMPILER_TARGET}" >> $GITHUB_ENV
          echo "MAVEN_TOOLCHAIN_VERSION=${MAVEN_TOOLCHAIN_VERSION}" >> $GITHUB_ENV

      - name: Add JAVA version for toolchain if required
        id: add-java-for-toolchain
        uses: GHCICD/setup-java@vHEAD-GHCICD-552
        if: env.MAVEN_TOOLCHAIN_VERSION != inputs.javaHomeVersion
        with:
          java-version: ${{ env.MAVEN_TOOLCHAIN_VERSION }}
          distribution: zulu
          update-toolchains-only: true

      - name: Show Maven version, settings.xml and toolchains.xml
        id: show-maven-version
        run: |
          echo "PATH:      ${PATH}"
          echo "JAVA_HOME: ${JAVA_HOME}"
          mvn --version
          echo "MAVEN_OPTS: ${MAVEN_OPTS}"
          echo "##### BEGIN - settings.xml"
          cat ~/.m2/settings.xml
          echo "##### END - settings.xml"
          echo "##### BEGIN - toolchains.xml"
          cat ~/.m2/toolchains.xml
          echo "##### END - toolchains.xml"
          # Set step outputs:
          echo "MAVEN_VERSION=${{ inputs.mavenVersion }}" >> $GITHUB_OUTPUT
          echo "MAVEN_VERSION=${{ inputs.mavenVersion }}" >> $GITHUB_ENV

      - name: Determine effective release version and next dev version
        id: determine-unleash-versions
        run: |
          if [[ -n "${{ inputs.releaseVersion }}" ]]; then
            EFFECTIVE_RELEASE_VERSION="${{ inputs.releaseVersion }}"
            echo "Effective release version taken from inputs.releaseVersion: ${EFFECTIVE_RELEASE_VERSION}"
          else
            EFFECTIVE_RELEASE_VERSION="${MAVEN_PROJECT_VERSION%*-SNAPSHOT}"
            echo "Effective release version derived from project POM: ${EFFECTIVE_RELEASE_VERSION}"
          fi
          if [[ -n "${{ inputs.nextSnapshotVersion }}" ]]; then
            EFFECTIVE_NEXT_SNAPSHOT_VERSION="${{ inputs.nextSnapshotVersion }}"
            echo "Effective next SNAPSHOT version taken from inputs.nextSnapshotVersion: ${EFFECTIVE_NEXT_SNAPSHOT_VERSION}"
          else
            # Derive next snapshot version from EFFECTIVE_RELEASE_VERSION
            if [[ ! "${EFFECTIVE_RELEASE_VERSION}" =~ ^[0-9]+(\.[0-9]+){0,3}$ ]]; then
              echo "### ERROR: EFFECTIVE_RELEASE_VERSION=${EFFECTIVE_RELEASE_VERSION} is not of format 'major[.minor[.incremental[.build]]]'"
              exit 1
            fi
            # Split release version parts into ARRAY
            _IFS=$IFS && IFS='.' && read -r -a ARRAY <<< "${EFFECTIVE_RELEASE_VERSION}" && IFS=$_IFS
            j=$((${#ARRAY[@]} - 1))
            ARRAY[j]=$((ARRAY[$j] + 1))
            EFFECTIVE_NEXT_SNAPSHOT_VERSION=""
            for i in ${!ARRAY[@]}; do
              EFFECTIVE_NEXT_SNAPSHOT_VERSION="${EFFECTIVE_NEXT_SNAPSHOT_VERSION}${ARRAY[$i]}"
              [[ $i -lt $j ]] && EFFECTIVE_NEXT_SNAPSHOT_VERSION="${EFFECTIVE_NEXT_SNAPSHOT_VERSION}."
            done
            EFFECTIVE_NEXT_SNAPSHOT_VERSION="${EFFECTIVE_NEXT_SNAPSHOT_VERSION}-SNAPSHOT"
            echo "Effective next SNAPSHOT version derived from effective release version: ${EFFECTIVE_NEXT_SNAPSHOT_VERSION}"
          fi
          # Log to build log
          echo "  EFFECTIVE_RELEASE_VERSION:       ${EFFECTIVE_RELEASE_VERSION}"
          echo "  EFFECTIVE_NEXT_SNAPSHOT_VERSION: ${EFFECTIVE_NEXT_SNAPSHOT_VERSION}"
          # Export to step outputs and env
          echo "EFFECTIVE_RELEASE_VERSION=${EFFECTIVE_RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "EFFECTIVE_RELEASE_VERSION=${EFFECTIVE_RELEASE_VERSION}" >> $GITHUB_ENV
          echo "EFFECTIVE_NEXT_SNAPSHOT_VERSION=${EFFECTIVE_NEXT_SNAPSHOT_VERSION}" >> $GITHUB_OUTPUT
          echo "EFFECTIVE_NEXT_SNAPSHOT_VERSION=${EFFECTIVE_NEXT_SNAPSHOT_VERSION}" >> $GITHUB_ENV

      - name: Validate effective release and next dev version
        run: |
          if [[ "${{ env.EFFECTIVE_RELEASE_VERSION }}" == *-SNAPSHOT ]]; then
            echo "### ERROR: Illegal release version - must NOT be a SNAPSHOT version!"
            exit 1
          fi
          if [[ "${{ env.EFFECTIVE_NEXT_SNAPSHOT_VERSION }}" != *-SNAPSHOT ]]; then
            echo "### ERROR: Illegal next development version - MUST be a SNAPSHOT version!"
            exit 1
          fi

      - name: Log Action Summary
        run: |
          MD_CODE='```'
          cat << END_OF_SUMMARY | tee -a ${GITHUB_STEP_SUMMARY}
          ## Job Filter Summary
          ${MD_CODE}
          ========================================
          Unleash job details:
                          IS_DRYRUN: ${IS_DRYRUN}
                    RELEASE_VERSION: ${EFFECTIVE_RELEASE_VERSION}
                      NEXT_SNAPSHOT: ${EFFECTIVE_NEXT_SNAPSHOT_VERSION}
                      MAVEN_VERSION: ${MAVEN_VERSION}
              MAVEN_COMPILER_TARGET: ${MAVEN_COMPILER_TARGET}
            MAVEN_TOOLCHAIN_VERSION: ${MAVEN_TOOLCHAIN_VERSION}
          ========================================
          ${MD_CODE}
          END_OF_SUMMARY
        env:
          IS_DRYRUN: ${{ env.DO_NOT_RELEASE_SONATYPE_STAGING == 'true' }}
          EFFECTIVE_RELEASE_VERSION: ${{ env.EFFECTIVE_RELEASE_VERSION }}
          EFFECTIVE_NEXT_SNAPSHOT_VERSION: ${{ env.EFFECTIVE_NEXT_SNAPSHOT_VERSION }}
          MAVEN_VERSION: ${{ env.MAVEN_VERSION }}
          MAVEN_COMPILER_TARGET: ${{ env.MAVEN_COMPILER_TARGET }}
          MAVEN_TOOLCHAIN_VERSION: ${{ env.MAVEN_TOOLCHAIN_VERSION }}

      - name: Unleash project
        run: |
          # 
          git config user.name "GitHub CICD"
          git config user.email "${{ github.repository_owner }}@users.noreply.github.com"
          UNLEASH_WORKFLOWS_DIR=~/unleash_workflows
          mkdir -p ${UNLEASH_WORKFLOWS_DIR}
          UNLEASH_WORKFLOW_FILE=${UNLEASH_WORKFLOWS_DIR}/perform
          curl "${{ env.UNLEASH_WORKFLOW_URL }}" -o "${UNLEASH_WORKFLOW_FILE}"
          echo "##### BEGIN - ${UNLEASH_WORKFLOW_FILE}"
          cat ${UNLEASH_WORKFLOW_FILE}
          echo "##### END - ${UNLEASH_WORKFLOW_FILE}"
          UNLEASH_CMDLINE_GOAL=$(mvn -q -Dexpression=unleash.cmdline.goal -DforceStdout ${{ env.MVN_HELP_VERSION_OPTION }} help:evaluate)
          if [[ -z "${UNLEASH_CMDLINE_GOAL}" || "${UNLEASH_CMDLINE_GOAL}" == null* ]]; then
            UNLEASH_CMDLINE_GOAL="unleash:perform"
          else
            echo "### INFO: unleash.cmdline.goal defined by POM"
          fi
          echo "  UNLEASH_CMDLINE_GOAL: ${UNLEASH_CMDLINE_GOAL}"
          #
          # -ntp Do not display transfer progress when downloading or uploading
          # -B   Run in non-interactive (batch) mode (disables output color)
          # -U   Forces a check for missing releases and updated snapshots on
          # -e   Extended error logging
          #
          mvn ${MVN_NTP_OPTION} -B -U -e \
              ${UNLEASH_CMDLINE_GOAL} \
                -DenableLogTimestamps=true \
                -Dunleash.releaseVersion=${{ env.EFFECTIVE_RELEASE_VERSION }} \
                -Dunleash.developmentVersion=${{ env.EFFECTIVE_NEXT_SNAPSHOT_VERSION }} \
                -Dunleash.allowLocalReleaseArtifacts=true \
                -Dunleash.commitBeforeTagging=true \
                -Dunleash.tagNamePattern=v@{project.version} \
                -Dunleash.scmUsernameEnvVar=UNLEASH_SCM_USERNAME \
                -Dunleash.scmPasswordEnvVar=UNLEASH_SCM_PASSWORD \
                -Dunleash.scmMessagePrefix="[unleash-maven-plugin] ${{ env.EFFECTIVE_RELEASE_VERSION }} ->  ${{ env.EFFECTIVE_NEXT_SNAPSHOT_VERSION }}" \
                -Dworkflow=${UNLEASH_WORKFLOW_FILE} ${{ inputs.mavenOpts }}
          # not used:
          #   -Dunleash.releaseArgs
        env:
          OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          OSSRH_GPG_PASSPHRASE: ${{ secrets.OSSRH_GPG_PASSPHRASE }}
          IS_SNAPSHOT_VERSION: false
          MVN_NTP_OPTION: ${{ env.MVN_NTP_OPTION }}
          # We do not want to release to Maven Central via this action!
          # Releases shall be performed via unleash plugin only.
          DO_NOT_RELEASE_SONATYPE_STAGING: ${{ env.DO_NOT_RELEASE_SONATYPE_STAGING }}
          #UNLEASH_SCM_PASSWORD: ${{ github.token }}
          #UNLEASH_SCM_USERNAME: ${{ github.repository_owner }}
          UNLEASH_SCM_PASSWORD: ${{ secrets.SERVICE_USER_PAT }}
          UNLEASH_SCM_USERNAME: ${{ secrets.SERVICE_USER_NAME }}
          TEST_REPO_KEY_PASSPHRASE: ${{ secrets.TEST_REPO_KEY_PASSPHRASE }}
