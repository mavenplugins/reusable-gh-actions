# ------------------------------------------------------------------------------------------
# This is reusable workflow to create a Github release with CHANGELOG.md based release notes 
# ------------------------------------------------------------------------------------------
name: __Reusable Create Github Release Notes

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      release_ref:
        required: false
        type: string
        default: ${{ github.ref }}
        description: "Optional: github.ref by default"
      postfix_to_strip_from_ref:
        required: false
        type: string
        default: '_release_notes'
        description: "Optional: _release_notes by default"

jobs:
  # Ensure that we run on tag references only
  job1_Validate_Tag_Reference:
    name: Vaidate tag reference is not a version tag
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Abort if reference is not a version tag
        if: ${{ !startsWith(inputs.release_ref, 'refs/tags/v') }}
        run: |
          echo "The selected git ref=${{ inputs.release_ref }} is NOT a valid release tag. Please select a valid release TAG as reference."
          exit 1

      - name: Confirm valid version tag
        run: |
          echo "The selected git ref=${{ inputs.release_ref }} is a valid release tag."

  job2_Create_GitHub_Release:
    name: Create GitHub Release
    runs-on: ${{ inputs.runner }}
    needs: job1_Validate_Tag_Reference
    #if: github.event.repository.owner.id == github.event.sender.id
    # Set job wide environment
    env:
      BUILD_DIR: gh_release_build
    steps:
      # Set version tags as global environment properties
      - name: Prepare Version Tags
        run: |
          RELEASE_REF=${{ inputs.release_ref }}
          POSTFIX_TO_STRIP=${{ inputs.postfix_to_strip_from_ref }}
          # Strip refs/tags/v for RELEASE_VERSION
          RELEASE_VERSION=${RELEASE_REF/refs\/tags\/v/}
          # Strip postfix from RELEASE_VERSION
          RELEASE_VERSION=${RELEASE_VERSION%*${POSTFIX_TO_STRIP}}
          # Prepend the 'v' again for VERSION_TAG
          VERSION_TAG=v${RELEASE_VERSION}
          # Export VERSION_TAG and RELEASE_VERSION to env
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Prepare Release name
        run: |
          OWNER_AND_REPO_NAME=${{ github.repository }}
          REPO_NAME=${OWNER_AND_REPO_NAME#*/}
          echo "RELEASE_NAME=${{ env.VERSION_TAG }} ${REPO_NAME}" >> $GITHUB_ENV

      - name: Log Environment
        run: |
          echo "  runner:                           ${{ inputs.runner }}"
          echo "  inputs.release_ref:               ${{ inputs.release_ref }}"
          echo "  inputs.postfix_to_strip_from_ref: ${{ inputs.postfix_to_strip_from_ref }}"
          echo "  VERSION_TAG:                      ${{ env.VERSION_TAG }}"
          echo "  RELEASE_VERSION:                  ${{ env.RELEASE_VERSION }}"
          echo "  RELEASE_NAME:                     ${{ env.RELEASE_NAME }}"

      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_ref }}

      - name: Create build dir and probable download directories
        run: |
          mkdir -p ${{ env.BUILD_DIR }}/artifacts/{images,logfiles}

      - name: Validate CHANGELOG.md for this release version
        # explanation of sed command:
        # 1. select lines between SED_VERSION_BEGIN_PATTERN and SED_VERSION_END_PATTERN
        # 2. invert this selection
        # 3. delete it
        # => only selection is remaining in stream
        run: |
          SED_VERSION_BEGIN_PATTERN="/^## \\[${{ env.RELEASE_VERSION }}\\]/"
          SED_VERSION_END_PATTERN="/^## /"
          echo "Pattern used for sed: ${SED_VERSION_BEGIN_PATTERN},${SED_VERSION_END_PATTERN} ! d"
          #
          # Extract the release notes for this RELEASE_VERSION including the line of the previous version:
          #
          RELEASE_NOTES_WITH_PREV_VERSION=$(sed -e "${SED_VERSION_BEGIN_PATTERN},${SED_VERSION_END_PATTERN} ! d" CHANGELOG.md)
          echo ">>>>>> RELEASE_NOTES_WITH_PREV_VERSION - BEGIN >>>>>>"
          echo "${RELEASE_NOTES_WITH_PREV_VERSION}"
          echo "<<<<<< RELEASE_NOTES_WITH_PREV_VERSION - END <<<<<<"
          #
          # Format the release notes:
          #
          # 1. Remove last 2 lines: head -n 2
          # 2. Remove any empty line from the end: sed -e :a -e '/^\n*$/{$d;N;ba' -e '}'
          #    (s. http://sed.sourceforge.net/sed1line.txt for reference)
          #
          #RELEASE_VERSION_NOTES=$(echo "$RELEASE_NOTES_WITH_PREV_VERSION" | head -n -2 | sed -e :a -e '/^\n*$/{$d;N;ba' -e '}')
          #echo "${RELEASE_VERSION_NOTES}" >> RELEASE.md
          #printf "\n" >> RELEASE.md
          #
          # Extract previous release version:
          #
          # 1. Cut the last line only: tail -1
          # 2. Get the version from the enclosing [] brackets: awk -F "[][]" '{ print $2 }'
          #
          PREV_RELEASE_VERSION=$(echo "$RELEASE_NOTES_WITH_PREV_VERSION" | tail -1 | awk -F "[][]" '{ print $2 }')
          if [ -z "$PREV_RELEASE_VERSION" ]; then
            EXPECTED_COMPARE_URL="${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ env.RELEASE_VERSION }}"
          else
            EXPECTED_COMPARE_URL="${{ github.server_url }}/${{ github.repository }}/compare/v${PREV_RELEASE_VERSION}..v${{ env.RELEASE_VERSION }}"
          fi
          # Validate CHANGELOG.md content
          IS_OK="true"
          if ! grep -q "^## \\[${{ env.RELEASE_VERSION }}\\]" CHANGELOG.md; then
            IS_OK="false"
            echo "ERROR: CHANGELOG.md does not contain an entry for this release version of format: ## [${{ env.RELEASE_VERSION }}]"
          fi
          if ! grep -q "^\\[${{ env.RELEASE_VERSION }}\\]: ${EXPECTED_COMPARE_URL}" CHANGELOG.md; then
            IS_OK="false"
            echo "ERROR: CHANGELOG.md does not contain a line with a compare link of format: [${{ env.RELEASE_VERSION }}]: ${EXPECTED_COMPARE_URL}"
          fi
          if [ "$IS_OK" != "true" ]; then
            echo "Please review CHANGELOG.md and update it for the content expected."
            exit 1
          fi

      # Prepare release notes and build directory
      - name: Prepare release notes and build directory
        run: |
          #cp ./README.md ${{ env.BUILD_DIR }}/README.md
          #Create an empty README.md to make GHCICD/release-notes-from-changelog happy
          touch ${{ env.BUILD_DIR }}/README.md
          cp ./CHANGELOG.md ${{ env.BUILD_DIR }}/CHANGELOG.md
          if [[ -f ./.github/workflows/resources/RELEASE_HEAD.md ]]; then
            cp ./.github/workflows/resources/RELEASE_HEAD.md ${{ env.BUILD_DIR }}/RELEASE_HEAD.md
          else
            
            {
            # Note: subsequent lines til EOF marker must be left aligned to this "run:" level left border
            cat <<EOF >${{ env.BUILD_DIR }}/RELEASE_HEAD.md
          ## Release Notes - ${{ github.repository }}
          EOF
            }
          fi

      # Create release notes by release-notes-from-changelog
      - name: Create release notes by GHCICD/release-notes-from-changelog@v1
        uses: GHCICD/release-notes-from-changelog@v1
        with:
          version: ${{ env.RELEASE_VERSION }}
          working-directory: ${{ env.BUILD_DIR }}

      - name: List all build artifacts
        run: |
          ls -lR ${{ env.BUILD_DIR }}

      - name: Log RELEASE.md
        run: |
          echo ">>>>> build/RELEASE.md:"
          cat ${{ env.BUILD_DIR }}/RELEASE.md
          echo "<<<<<"
#          echo ">>>>> build/CHANGELOG.md:"
#          cat ${{ env.BUILD_DIR }}/CHANGELOG.md
#          echo "<<<<<"

      # Create release with info from CHANGELOG.md
      - name: Create GitHub release by ncipollo/release-action@v1
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.VERSION_TAG }}
          name: ${{ env.RELEASE_NAME }}
          #artifacts: "${{ env.BUILD_DIR }}/${{ inputs.image_UploadArtifactName }}.zip,${{ env.BUILD_DIR }}/${{ inputs.packages_UploadArtifactName }}.zip,${{ env.BUILD_DIR }}/${{ inputs.logfiles_UploadArtifactName }}.zip"
          bodyFile: ${{ env.BUILD_DIR }}/RELEASE.md

#
# EOF
#